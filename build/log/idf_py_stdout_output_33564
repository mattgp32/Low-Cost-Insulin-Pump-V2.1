[1/17] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\dev\GitHub\BTInsulinpumpSW\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 C:/dev/GitHub/BTInsulinpumpSW/build/bootloader/bootloader.bin"
Bootloader binary size 0x51f0 bytes. 0x2e10 bytes (36%) free.
[2/15] Building C object esp-idf/motor/CMakeFiles/__idf_motor.dir/motor.c.obj
[3/15] Linking C static library esp-idf\motor\libmotor.a
[4/15] Building C object esp-idf/buzzer/CMakeFiles/__idf_buzzer.dir/buzzer.c.obj
[5/15] Building C object esp-idf/leds/CMakeFiles/__idf_leds.dir/leds.c.obj
[6/15] Linking C static library esp-idf\leds\libleds.a
[7/15] Building C object esp-idf/ins_rate/CMakeFiles/__idf_ins_rate.dir/ins_rate.c.obj
[8/15] Linking C static library esp-idf\buzzer\libbuzzer.a
[9/15] Linking C static library esp-idf\ins_rate\libins_rate.a
[10/15] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/app_main.c.obj
[11/15] Linking C static library esp-idf\main\libmain.a
[12/15] Generating ld/sections.ld
[13/15] Linking CXX executable BTpumpV1.elf
[14/15] Generating binary image from built executable
esptool.py v4.7.dev2
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated C:/dev/GitHub/BTInsulinpumpSW/build/BTpumpV1.bin
[15/15] cmd.exe /C "cd /D C:\dev\GitHub\BTInsulinpumpSW\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/dev/GitHub/BTInsulinpumpSW/build/partition_table/partition-table.bin C:/dev/GitHub/BTInsulinpumpSW/build/BTpumpV1.bin"
BTpumpV1.bin binary size 0x3f2a0 bytes. Smallest app partition is 0x100000 bytes. 0xc0d60 bytes (75%) free.
